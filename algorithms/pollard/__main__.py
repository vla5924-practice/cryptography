import random
import math

def gcd(a, b):
    """
    Вычисляет наибольший общий делитель (НОД) двух чисел a и b
    с использованием алгоритма Евклида.
    """
    while b:
        a, b = b, a % b
    return a

def f(x, n):
    """
    Произвольная функция, используемая в алгоритме, которая
    должна быть модифицирована для достижения лучших результатов.
    Простейшая реализация — f(x) = (x^2 + 1) % n.
    """
    return (x ** 2 + 1) % n

def pollard_rho(n):
    """
    Реализует Ро-алгоритм Полларда для факторизации числа n.
    Если n составное число, возвращает один из его нетривиальных делителей.
    Если n простое число, может зациклиться.
    """
    if n % 2 == 0:
        return 2
    
    # Инициализация значений x0 и y0
    x = random.randint(1, n - 1)
    y = x
    # Константа для f(x), обычно 1, но в простейшем случае это не обязательно
    c = random.randint(1, n - 1)
    
    factor = 1
    
    # Пока не найдём нетривиальный делитель
    while factor == 1:
        # Генерация новых значений x и y
        x = f(x, n)
        y = f(f(y, n), n)
        
        # Вычисляем текущую разность
        difference = abs(x - y)
        
        # Вычисляем НОД текущей разности и n
        factor = gcd(difference, n)
        
    return factor

if __name__ == "__main__":
    print("Введите число, которое нужно факторизовать:")
    number = int(input())

    if number <= 1:
        print("Число должно быть больше 1.")
    else:
        factor = pollard_rho(number)
        if factor == number:
            print(f"{number} является простым числом.")
        else:
            print(f"Один из нетривиальных делителей числа {number} — {factor}.")
